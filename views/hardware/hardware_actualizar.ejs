<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Actualizar Hardware</title>
    <link rel="stylesheet" href="/css/actualizar.css">
    <script src="/socket.io/socket.io.js"></script>
</head>
<body>
    <h1>Actualizar Hardware</h1>

    <% if (messages.error_msg) { %> 
        <div class="alert alert-danger"><%= messages.error_msg %></div>
    <% } %>
    <% if (messages.success_msg) { %> 
        <div class="alert alert-success"><%= messages.success_msg %></div>
    <% } %>
    
    <form action="/hardware/actualizar/<%= hardware.id_hardware %>" method="POST">
        <label for="tipo_componente">Tipo de Componente:</label>
        <select name="tipo_componente" required>
            <option value="">Seleccione un Tipo de Componente</option>
            <option value="Procesador" <%= hardware.tipo_componente === 'Procesador' ? 'selected' : '' %>>Procesador</option>
            <option value="RAM" <%= hardware.tipo_componente === 'RAM' ? 'selected' : '' %>>RAM</option>
            <option value="Disco_Duro" <%= hardware.tipo_componente === 'Disco_Duro' ? 'selected' : '' %>>Disco Duro</option>
            <option value="Tarjeta_Grafica" <%= hardware.tipo_componente === 'Tarjeta_Grafica' ? 'selected' : '' %>>Tarjeta Gráfica</option>
            <option value="Fuente_Alimentacion" <%= hardware.tipo_componente === 'Fuente_Alimentacion' ? 'selected' : '' %>>Fuente de Alimentación</option>
            <option value="Otro" <%= hardware.tipo_componente === 'Otro' ? 'selected' : '' %>>Otro</option>
        </select>

        <label for="marca">Marca:</label>
        <input type="text" name="marca" value="<%= hardware.marca %>" >

        <label for="modelo">Modelo:</label>
        <input type="text" name="modelo" value="<%= hardware.modelo %>" >

        <label for="especificaciones">Especificaciones:</label>
        <input type="text" name="especificaciones" value="<%= hardware.especificaciones %>">

        <label for="estado">Estado:</label>
        <select name="estado" required>
            <option value="disponible" <%= hardware.estado === 'disponible' ? 'selected' : '' %>>Disponible</option>
            <option value="en uso" <%= hardware.estado === 'en uso' ? 'selected' : '' %>>En uso</option>
            <option value="en reparación" <%= hardware.estado === 'en reparación' ? 'selected' : '' %>>En reparación</option>
            <option value="desechado" <%= hardware.estado === 'desechado' ? 'selected' : '' %>>Desechado</option>
        </select>

        <label for="id_ubicacion">Ubicación:</label>
        <select name="id_ubicacion" required>
            <% ubicaciones.forEach(function(ubicacion) { %>
                <option value="<%= ubicacion.id_ubicacion %>" <%= ubicacion.id_ubicacion === hardware.id_ubicacion ? 'selected' : '' %>><%= ubicacion.nombre_ubicacion %></option>
            <% }); %>
        </select>

        <button type="submit">Actualizar Hardware</button>
        <button class="button-rdc" onclick="window.location.href='/ubicaciones/listar'">Cancelar</button>
    </form>

        <!-- Sección de chat -->
        <section id="chatSection" style="display: none;">
            <h3>LepantoChat</h3>
            <div id="chatContainer">
                <div id="messages" style="height: 200px; overflow-y: auto; border: 1px solid #ccc; padding: 10px;"></div>
                <% if (user.rol === 'tecnico' || user.rol === 'admin') { %>
                    <input type="text" id="chatInput" placeholder="Escribe tu mensaje aquí..." />
                    <button onclick="sendMessage()">Enviar</button>
                <% } else { %>
                    <input type="text" id="chatInput" placeholder="No tienes permiso para enviar mensajes." disabled />
                <% } %>
            </div>
        </section>
        
        <!-- Botón para abrir/cerrar el chat -->
        <% if (user.rol === 'tecnico' || user.rol === 'admin') { %>
            <button class="chat-toggle-button" onclick="toggleChat()">💬
                <span class="notification-dot" id="notificationDot"></span>
            </button>
        <% } %>
    
    <script>
        const userName = "<%= user.username %>";
        const userId = "<%= user.id %>";

        // Conexión a Socket.IO
        const socket = io();

        // Verificar si hay una notificación pendiente al cargar la página
        if (localStorage.getItem('newMessageNotification') === 'true') {
            document.getElementById('notificationDot').style.display = 'block';
        }

        // Escuchar el historial de mensajes al cargar la página
        socket.on('cargar-mensajes', (mensajes) => {
            const messagesContainer = document.getElementById('messages');
            messagesContainer.innerHTML = ""; // Limpiar mensajes previos

            mensajes.forEach((msg) => {
                const { username, mensaje, fecha } = msg;
                messagesContainer.innerHTML += `<div><strong>${username}</strong> [${new Date(fecha).toLocaleString()}]: ${mensaje}</div>`;
            });

            // Desplazar hacia abajo para mostrar los mensajes más recientes
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        });

        // Función para enviar un mensaje
        function sendMessage() {
            const input = document.getElementById('chatInput');
            const message = input.value.trim();
            if (message) {
                const msg = {
                    userId: userId,
                    mensaje: message,
                    username: userName
                };

                // Emitir el mensaje al servidor
                socket.emit('mensaje', msg);

                // Limpiar el campo de entrada
                input.value = '';
            }
        }

        // Escuchar mensajes emitidos por el servidor
        socket.on('mensaje', (data) => {
            const messagesContainer = document.getElementById('messages');
            const { username, mensaje, timestamp } = data;

            // Agregar mensaje a la vista
            messagesContainer.innerHTML += `<div><strong>${username}</strong> [${timestamp}]: ${mensaje}</div>`;
            messagesContainer.scrollTop = messagesContainer.scrollHeight; // Desplazar hacia abajo

            // Mostrar la notificación si el chat está cerrado
            const chatSection = document.getElementById('chatSection');
            if (chatSection.style.display === 'none') {
                showNotificationDot();
            }
        });

        // Agregar evento para enviar mensaje con la tecla Enter
        document.getElementById('chatInput').addEventListener('keydown', function(event) {
            if (event.key === 'Enter') {
                event.preventDefault();
                sendMessage();
            }
        });

        // Función para alternar la visibilidad del chat
        function toggleChat() {
            const chatSection = document.getElementById('chatSection');
            const notificationDot = document.getElementById('notificationDot');

            // Alterna la visibilidad del chat
            if (chatSection.style.display === 'block') {
                chatSection.style.display = 'none';
                hideNotificationDot(); // Esconde el punto rojo cuando el chat se cierra
            } else {
                chatSection.style.display = 'block';
                hideNotificationDot(); // Esconde el punto rojo al abrir el chat (en caso de haberlo)
            }

            // Limpiar la notificación al abrir el chat
            localStorage.removeItem('newMessageNotification');
        }    

        // Mostrar la notificación
        function showNotificationDot() {
            document.getElementById('notificationDot').style.display = 'block';
            localStorage.setItem('newMessageNotification', 'true'); // Guardar que hay una notificación pendiente
        }

        // Ocultar la notificación
        function hideNotificationDot() {
            document.getElementById('notificationDot').style.display = 'none';
            localStorage.removeItem('newMessageNotification'); // Eliminar la notificación al abrir el chat
        }
    </script>
</body>
</html>
